x=[0.0056669 -0.0084206 -0.0063039 0.0074463 -0.0048976 0.0016912 -0.0030798 0.0010512 -0.0163003 0.0366982 0.0112551 0.0028366 -0.0027459 -0.0056062 -0.0033677 -0.0005256 -0.0269336 0.0649757 0.0162062 0.0131196 -0.0103894 -0.0095211 -0.0098153 0.0000000 0.0017555 0.0807333 0.0047769 0.0011905 0.0029370 -0.0030574 0.0009728 -0.0000442 0.0091779 0.1530460 0.0032499 0.0098274 0.0009763 -0.0044236 -0.0011342 0.0009629 0.0010583 -0.1229708 0.0205254 -0.0067929 0.0026670 0.0046462 0.0055045 -0.0009969 -0.0248170 -0.1809660 0.0572570 -0.0004661 -0.0050553 -0.0002287 0.0011937 -0.0019937 -0.0063300 0.0800785 -0.0390145 0.0019638 -0.0067799 -0.0071953 0.0114321 -0.0083299 -0.0034820 0.3132030 -0.0747790 0.0137549 -0.0125835 -0.0188142 0.0217300 -0.0156970 -0.0251617 0.2653700 -0.0302415 -0.0016962 0.0226960 -0.0048198 -0.0033206 0.0047338 -0.0751404 0.3497740 -0.0032261 -0.0038585 0.0403366 -0.0098683 -0.0054475 0.0074738 -0.0358292 0.0182855 0.0357765 -0.0088067 0.0264600 0.0044730 -0.0135887 0.0115854]';
%predict=gmm_convert(x,32,12,'../train/tone_dall/sad/6mix12mix_3/neutral_sad.tone.gmm','trajectory_d');
l=32;
mixNum=12;
gmmfile='../train/tone_dall/sad/6mix12mix_3/neutral_sad.tone.gmm';
method='trajectory_d';
%function predict=gmm_convert(x,l,mixNum,gmmfile,method)
    %gmm转化 
    % input: 
    %        x          input vector
    %        l          input length
    %       mixNum      mix number of gaussion distributon
    %       gmmfile     gmm parameter file,generated by SPTK gmm
    %                      command,please look SPTK document for file
    %                      format
    %       method      convertion method 
    % output:
    %       predict     converted vector
    %       
    %%%%%%% LiXian  2013/01/05%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     if (nargin<5)
%         method='general';
%     end
    
 gmmP=importdata(gmmfile);
if(strcmp(method,'general'))
    w=gmmP(1:mixNum);
    miux=zeros(l/2,mixNum);
    miuy=zeros(l/2,mixNum);
    sigma=zeros(l,l,mixNum);
    for i=1:mixNum
        miux(:,i)=gmmP(mixNum+(i-1)*(l^2+l)+1:mixNum+(i-1)*(l^2+l)+l/2);
        miuy(:,i)=gmmP(mixNum+(i-1)*(l^2+l)+l/2+1:mixNum+(i-1)*(l^2+l)+l);
        sigma(:,:,i)=reshape(gmmP(mixNum+(i-1)*(l^2+l)+l+1:mixNum+(i-1)*(l^2+l)+l+l^2),l,l);
    end

    sigmaxx=sigma(1:l/2,1:l/2,:);
    sigmayy=sigma(l/2+1:l,l/2+1:l,:);
    sigmaxy=sigma(1:l/2,l/2+1:l,:);
    sigmayx=sigma(l/2+1:l,1:l/2,:);
    
%     fprintf('gmm parameter:');
%     for i=1:mixNum
%         fprintf('mean of mix %d:\n%f\n%f\n',i,miux(:,i),miuy(:,i));
%     end
    for i=1:mixNum
%         fprintf('covariance of mix %d:\n%f\n%f\n',i,sigma(:,:,i),sigma(:,:,i));
        if(det(sigmaxx(:,:,i))<0)
            fprintf('sigmaxx is not positive!\n');
        end
    end
    px=zeros(mixNum,1);
    sum_gmm = 0;
    predict=zeros(l/2,1);
    for i = 1:mixNum
        px(i)= w(i).*1./((2*pi)^(l/4).*sqrt(det(sigmaxx(:,:,i)))).* ...
            exp(-0.5.*(x-miux(:,i))'/sigmaxx(:,:,i)*(x-miux(:,i)));
        sum_gmm = sum_gmm +px(i);
        predict=predict+px(i).*(miuy(:,i)+sigmayx(:,:,i)/sigmaxx(:,:,i)*(x-miux(:,i)));
    end
predict=predict./sum_gmm;

 predictF0=idct(predict,32);

            % figure
            % plot(idct(predict,32));
            % hold on;
            % plot(idct(y,32),'r');
            % hold on;
            % plot(idct(x,32),'g');
%             max=1;
%         for i=1:mixNum
%             px(i)=log(w(i))-0.5*log(det(sigmaxx(:,:,i)))-4*log(2*pi)-0.5.*(x-miux(:,i))'/sigmaxx(:,:,i)*(x-miux(:,i));
%             if(px(i)>px(max)) 
%                 max=i;
%             end
%         end
%         predict=miuy(:,max)+sigmayx(:,:,max)/sigmaxx(:,:,max)*(x-miux(:,max));
            
elseif(strcmp(method,'trajectory'))
   w=gmmP(1:mixNum);
    miux=zeros(l/2,mixNum);
    miuy=zeros(l/2,mixNum);
    sigma=zeros(l,l,mixNum);
    for i=1:mixNum
        miux(:,i)=gmmP(mixNum+(i-1)*(l^2+l)+1:mixNum+(i-1)*(l^2+l)+l/2);
        miuy(:,i)=gmmP(mixNum+(i-1)*(l^2+l)+l/2+1:mixNum+(i-1)*(l^2+l)+l);
        sigma(:,:,i)=reshape(gmmP(mixNum+(i-1)*(l^2+l)+l+1:mixNum+(i-1)*(l^2+l)+l+l^2),l,l);
    end
    
    sigmaxx=sigma(1:l/2,1:l/2,:);
    sigmayy=sigma(l/2+1:l,l/2+1:l,:);
    sigmaxy=sigma(1:l/2,l/2+1:l,:);
    sigmayx=sigma(l/2+1:l,1:l/2,:);
    
    
    T=length(x)/(l/2);
    mix=zeros(T,1);
    max=1;
    Em=zeros(l/2*T,1);
    px=zeros(mixNum,1);
    dm=zeros(l/2,l/2,T);
%     Dm=zeros(l/2*T,l/2*T);
     Dm=zeros(0,0);
    for t=1:T
        max=1;
        for i=1:mixNum
            px(i)=log(w(i))-0.5*log(det(sigmaxx(:,:,i)))-4*log(2*pi)-0.5.*(x((t-1)*l/2+1:t*l/2)-miux(:,i))'/sigmaxx(:,:,i)*(x((t-1)*l/2+1:t*l/2)-miux(:,i));
            if(px(i)>px(max)) 
                max=i;
            end
        end
        mix(t)=max;
        Em((t-1)*l/2+1:t*l/2)=miuy(:,max)+sigmayx(:,:,max)/sigmaxx(:,:,max)*(x((t-1)*l/2+1:t*l/2)-miux(:,max));
        dm(:,:,t)=sigmayy(:,:,max)-sigmayx(:,:,max)/sigmaxx(:,:,max)*sigmaxy(:,:,max);
        Dm=blkdiag(Dm,inv(dm(:,:,t)));
    end
    I=eye(l/2-1,l/2-1);
    W=zeros(0,0);
    for t=1:T
        
        W=blkdiag(W,I);
    end
    for t=1:T
        b=zeros(1,(l/2-1)*T);
        if(t>1 && t<T)
        
            b((t-2)*(l/2-1)+1)=-0.5;
            b(t*(l/2-1)+1)=0.5;
            W=[W(1:t*l/2-1,:) ;b ; W(t*l/2:end,:)];
        
        elseif(t==1)
        
            b(1)=-0.5;
            b(l/2)=0.5;
             W=[W(1:t*l/2-1,:) ;b ;  W(t*l/2:end,:)];
        elseif(t==T)
            b((T-1)*(l/2-1)+1)=0.5;
            b((T-2)*(l/2-1)+1)=-0.5;
            W=[W ;b];
        end
    end
    
    predict=inv((W'*Dm*W))*W'*Dm*Em;
    
elseif(strcmp(method,'trajectory_d'))
   w=gmmP(1:mixNum);
    miux=zeros(l/2,mixNum);
    miuy=zeros(l/2,mixNum);
    sigma=zeros(l,l,mixNum);
    for i=1:mixNum
        miux(:,i)=gmmP(mixNum+(i-1)*(l^2+l)+1:mixNum+(i-1)*(l^2+l)+l/2);
        miuy(:,i)=gmmP(mixNum+(i-1)*(l^2+l)+l/2+1:mixNum+(i-1)*(l^2+l)+l);
        sigma(:,:,i)=reshape(gmmP(mixNum+(i-1)*(l^2+l)+l+1:mixNum+(i-1)*(l^2+l)+l+l^2),l,l);
    end
    
    sigmaxx=sigma(1:l/2,1:l/2,:);
    sigmayy=sigma(l/2+1:l,l/2+1:l,:);
    sigmaxy=sigma(1:l/2,l/2+1:l,:);
    sigmayx=sigma(l/2+1:l,1:l/2,:);
    
    
     
    T=length(x)/(l/2);
    mix=zeros(T,1);
    
    Em=zeros(l/2*T,1);
    px=zeros(mixNum,1);
    dm=zeros(l/2,l/2,T);
%     Dm=zeros(l/2*T,l/2*T);
     Dm=zeros(0,0);
    for t=1:T
        max=1;
        for i=1:mixNum
            px(i)=log(w(i))-0.5*log(det(sigmaxx(:,:,i)))-4*log(2*pi)-0.5.*(x((t-1)*l/2+1:t*l/2)-miux(:,i))'/sigmaxx(:,:,i)*(x((t-1)*l/2+1:t*l/2)-miux(:,i));
            if(px(i)>px(max)) 
                max=i;
            end
        end
        mix(t)=max;
        Em((t-1)*l/2+1:t*l/2)=miuy(:,max)+sigmayx(:,:,max)/sigmaxx(:,:,max)*(x((t-1)*l/2+1:t*l/2)-miux(:,max));
        dm(:,:,t)=sigmayy(:,:,max)-sigmayx(:,:,max)/sigmaxx(:,:,max)*sigmaxy(:,:,max);
        Dm=blkdiag(Dm,inv(dm(:,:,t)));
    end
    I=eye(l/4,l/4);
    W=zeros(0,0);
    for t=1:T
        
        W=blkdiag(W,I);
    end
    for t=1:T
        b=zeros(l/4,l/4*T);
        
        if(t>1 && t<T)
            for j=1:l/4
                b(j,l/4*(t-2)+j)=-0.5;
                b(j,l/4*t+j)=0.5;
            end
                W=[W(1:l/2*(t-1)+l/4,:) ;b ; W(l/2*(t-1)+l/4+1:end,:)];
            
        elseif(t==1)
            for j=1:l/4
            b(j,j)=-0.5;
            b(j,l/4+j)=0.5;
            end
             W=[W(1:t*l/4,:) ;b ;  W(t*l/4+1:end,:)];
            
        elseif(t==T)
            for j=1:l/4
            b(j,l/4*(T-2)+j)=-0.5;
            b(j,l/4*(T-1)+j)=0.5;
            end
            W=[W ;b];
            
        end
        
    end
    temp11=W'*Dm;
    temp_inv=W'*Dm*W;
    inv_1=inv(W'*Dm*W);
    temp2=inv((W'*Dm*W))*W';
    temp=inv((W'*Dm*W))*W'*Dm;
    predict=inv(W'*Dm*W)*W'*Dm*Em;

elseif(strcmp(method,'trajectory_d_nodynamic'))
   w=gmmP(1:mixNum);
    miux=zeros(l/2,mixNum);
    miuy=zeros(l/2,mixNum);
    sigma=zeros(l,l,mixNum);
    for i=1:mixNum
        miux(:,i)=gmmP(mixNum+(i-1)*(l^2+l)+1:mixNum+(i-1)*(l^2+l)+l/2);
        miuy(:,i)=gmmP(mixNum+(i-1)*(l^2+l)+l/2+1:mixNum+(i-1)*(l^2+l)+l);
        sigma(:,:,i)=reshape(gmmP(mixNum+(i-1)*(l^2+l)+l+1:mixNum+(i-1)*(l^2+l)+l+l^2),l,l);
    end
    
    sigmaxx=sigma(1:l/2,1:l/2,:);
    sigmayy=sigma(l/2+1:l,l/2+1:l,:);
    sigmaxy=sigma(1:l/2,l/2+1:l,:);
    sigmayx=sigma(l/2+1:l,1:l/2,:);
    
    
     
    T=length(x)/(l/2);
    mix=zeros(T,1);
    
    Em=zeros(l/2*T,1);
    px=zeros(mixNum,1);
    dm=zeros(l/2,l/2,T);
%     Dm=zeros(l/2*T,l/2*T);
     Dm=zeros(0,0);
    for t=1:T
        max=1;
	sum_gmm=0;
        for i=1:mixNum
	    px(i)= w(i).*1./((2*pi)^(l/4).*sqrt(det(sigmaxx(:,:,i)))).* ...
            exp(-0.5.*(x((t-1)*l/2+1:t*l/2)-miux(:,i))'/sigmaxx(:,:,i)*(x((t-1)*l/2+1:t*l/2)-miux(:,i)));

                  sum_gmm = sum_gmm +px(i);
        Em((t-1)*l/2+1:t*l/2)= Em((t-1)*l/2+1:t*l/2)+px(i).*(miuy(:,i)+sigmayx(:,:,i)/sigmaxx(:,:,i)*(x((t-1)*l/2+1:t*l/2)-miux(:,i)));
	end
 Em((t-1)*l/2+1:t*l/2)= Em((t-1)*l/2+1:t*l/2)/sum_gmm;
     end
    predict=zeros(l/4*T,1);
   for t=1:T
        predict((t-1)*l/4+1:t*l/4)=Em((t-1)*l/2+1:t*l/2-l/4);
   end
    
end



%end
